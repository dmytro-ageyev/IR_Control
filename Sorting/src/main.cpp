/**
 * @file main.cpp
 * @brief Демонстрація сортування масиву за алгоритмом «Бульбашки» на платформі Arduino.
 *
 * Ця програма ініціалізує масив цілих чисел випадковими значеннями, виводить його
 * невідсортований вміст, сортує за допомогою алгоритму «Бульбашки» (у стандартному
 * або з моніторингом процесу варіанті), а потім відображає відсортований масив.
 * Взаємодія з користувачем відбувається через серійний монітор — програма
 * запитує підтвердження для переходу до кожного етапу.
 *
 * Можливості:
 * - Генерація випадкових чисел у заданому діапазоні.
 * - Запити до користувача через серійний монітор.
 * - Реалізація алгоритму сортування «Бульбашкою» з можливістю відстеження процесу.
 * - Виведення масиву до і після сортування.
 *
 * Функції:
 * - FillArray: заповнює масив випадковими цілими числами.
 * - WaitAnyKey: очікує натискання будь-якої клавіші через серійний монітор.
 * - PrintArray: виводить вміст масиву у серійний монітор.
 * - BubbleSort: сортує масив за зростанням методом «Бульбашки».
 *
 * @author Дмитро Агеєв
 * @date 05.10.2025
 */

#include <Arduino.h> // Бібліотека Arduino для базових функцій
#include "BubbleSort_Mon.h"

// Межі випадкових чисел (унікальні назви, щоб уникнути конфлікту)
/**
 * @brief Мінімальне значення для генерації випадкових чисел.
 */
const int RND_MIN = 0;

/**
 * @brief Максимальне значення для генерації випадкових чисел.
 *
 * Використовується для визначення верхньої межі (не включно) при генерації
 * випадкових чисел у програмі.
 */
const int RND_MAX = 100;

/**
 * @brief Визначає розмір масиву, що використовується в програмі.
 *
 * Ця константа задає кількість елементів, які буде містити масив.
 */
const int MY_ARRAY_SIZE = 10;

int MyArr[MY_ARRAY_SIZE]; // Масив для збереження випадкових чисел

// Прототипи функцій

/**
 * @brief Заповнює масив випадковими цілими числами.
 * 
 * @param arr Масив, який потрібно заповнити.
 * @param size Кількість елементів у масиві.
 */
void FillArray(int arr[], int size);

/**
 * @brief Очікує натискання будь-якої клавіші через серійний монітор.
 *
 * Використовується для паузи між діями програми, щоб користувач міг
 * переглянути інформацію або підготуватися до наступного кроку.
 * 
 * @param msg Повідомлення, яке буде виведено користувачу перед очікуванням.
 */
void WaitAnyKey(String msg);

/**
 * @brief Сортує масив за зростанням методом «бульбашки».
 *
 * Алгоритм порівнює сусідні елементи та міняє їх місцями, якщо вони
 * не впорядковані. Найбільші елементи «спливають» у кінець масиву
 * після кожного проходу.
 * 
 * @param arr Масив, який потрібно відсортувати.
 * @param size Кількість елементів у масиві.
 */
void BubbleSort(int arr[], int size);

/**
 * @brief Виводить елементи масиву у серійний монітор.
 *
 * @param arr Масив, який потрібно вивести.
 * @param size Кількість елементів у масиві.
 * @param msg Повідомлення, що передує виводу масиву (наприклад, "Несортований масив:").
 */
void PrintArray(int arr[], int size, String msg);

// ===== Функції Arduino =====

/**
 * @brief Функція setup() виконується один раз під час старту плати Arduino.
 *
 * Функція виконує такі кроки:
 * 1. Ініціалізує серійний порт на швидкості 9600 бод.
 * 2. Очікує введення користувача для заповнення масиву випадковими числами.
 * 3. Очікує введення користувача для виведення невідсортованого масиву.
 * 4. Очікує введення користувача для сортування масиву методом BubbleSort або BubbleSort_Mon.
 * 5. Виводить відсортований масив.
 *
 * Повідомлення та підказки виводяться українською мовою.
 */
void setup()
{
  // put your setup code here, to run once:
    Serial.begin(9600);  // Ініціалізація серійного порту зі швидкістю 9600 бод

  // Очікування дії користувача перед заповненням масиву
  WaitAnyKey("Натисніть будь-яку клавішу, щоб заповнити масив випадковими числами...");
  FillArray(MyArr, MY_ARRAY_SIZE); 

  // Вивід початкового (несортованого) масиву
  WaitAnyKey("Натисніть будь-яку клавішу, щоб переглянути вміст масиву...");
  PrintArray(MyArr, MY_ARRAY_SIZE, "Несортований масив:");

  // Сортування масиву
  WaitAnyKey("Натисніть будь-яку клавішу, щоб відсортувати масив методом 'Бульбашки'...");
  /* Поставити "зірочку" -> /
  BubbleSort(MyArr, MY_ARRAY_SIZE);
  /*/
  BubbleSort_Mon(MyArr, MY_ARRAY_SIZE);
  /**/

  // Вивід відсортованого масиву
  PrintArray(MyArr, MY_ARRAY_SIZE, "Масив після сортування (за зростанням):");
}


/**
 * @brief Функція loop() виконується циклічно після setup().
 *
 * У даній програмі не використовується, бо основна логіка виконується лише один раз.
 */
void loop() {
  // Порожня функція
}

// ===== Реалізація допоміжних функцій =====

/**
 * @brief Заповнює масив випадковими цілими числами у заданому діапазоні.
 *
 * Ця функція генерує випадкові числа в межах від RND_MIN до RND_MAX включно
 * та записує їх у масив, переданий через параметри. Перед генерацією
 * виконується ініціалізація генератора випадкових чисел на основі показань
 * аналогового входу A0, що забезпечує більш випадкові результати.
 *
 * @param arr Масив, який потрібно заповнити.
 * @param size Кількість елементів у масиві.
 */
void FillArray(int arr[], int size)
{
  // Ініціалізація (засівання) генератора випадкових чисел
  // analogRead(A0) читає "шумове" значення з нез'єднаного аналогового входу,
  // що забезпечує непередбачувану початкову точку для randomSeed().
  randomSeed(analogRead(A0));

  // Цикл для заповнення кожного елемента масиву випадковим числом
  for (int i = 0; i < size; i++)
  {
    // Генеруємо випадкове число в межах [RND_MIN, RND_MAX]
    // Функція random() не включає верхню межу, тому додаємо +1
    arr[i] = random(RND_MIN, RND_MAX + 1);
  }

  // Виведення повідомлення у серійний монітор про завершення заповнення масиву
  Serial.println("Масив заповнено випадковими числами.\r\n");
}


/**
 * @brief Очікує натискання будь-якої клавіші через серійний монітор.
 *
 * Функція зупиняє виконання програми, доки користувач не введе будь-який символ
 * у серійному моніторі Arduino IDE. Це дозволяє реалізувати "покрокове"
 * виконання програми, щоб користувач міг спостерігати за кожним етапом.
 *
 * @param msg Повідомлення, яке виводиться користувачу з поясненням,
 *            що необхідно зробити (наприклад, "Натисніть будь-яку клавішу...").
 */
void WaitAnyKey(String msg)
{
  // Виводимо повідомлення користувачу у серійний монітор.
  // Наприклад: "Натисніть будь-яку клавішу, щоб продовжити..."
  Serial.println(msg);

  // Цикл очікує, доки користувач не введе символ у серійному моніторі.
  // Serial.available() повертає кількість байтів, готових для зчитування.
  // Якщо немає введення — виконується коротка затримка (10 мс), щоб не перевантажувати процесор.
  while (!Serial.available()) delay(10);

  // Зчитуємо один символ із вхідного буфера.
  // Це очищає буфер і запобігає повторному спрацьовуванню на той самий ввід.
  Serial.read();
}


/**
 * @brief Виводить вміст цілочисельного масиву у серійний монітор, перед цим показує повідомлення.
 *
 * Функція спочатку виводить задане повідомлення, потім послідовно друкує всі елементи масиву
 * через символ табуляції (\t) для зручності читання. Після завершення виведення переходить
 * на новий рядок.
 *
 * @param arr   Масив цілих чисел для виведення.
 * @param size  Кількість елементів у масиві.
 * @param msg   Повідомлення, яке буде показано перед вмістом масиву.
 */
void PrintArray(int arr[], int size, String msg)
{
  // Виводимо повідомлення, щоб користувач розумів, який масив зараз буде показано.
  // Наприклад: "Несортований масив:" або "Масив після сортування:".
  Serial.println(msg);

  // Проходимо по всіх елементах масиву
  for (int i = 0; i < size; i++)
  {
    // Виводимо поточний елемент масиву у серійний монітор
    Serial.print(arr[i]);

    // Якщо елемент не останній — додаємо символ табуляції для розділення значень
    // Це робить вивід більш акуратним і читабельним
    if (i < size - 1)
      Serial.print("\t");
  }

  // Після завершення циклу переходимо на новий рядок
  // щоб наступний вивід починався з нового рядка у моніторі
  Serial.println();
}


/**
 * @brief Сортує масив цілих чисел методом бульбашки (Bubble Sort).
 *
 * Функція BubbleSort виконує сортування масиву за зростанням
 * методом «бульбашки» (Bubble Sort).
 * Принцип роботи: порівнюються сусідні елементи масиву,
 * і якщо поточний більший за наступний — вони міняються місцями.
 * Таким чином, після кожного проходу найбільший елемент «спливає» в кінець масиву,
 * тому назва «бульбашка».
 *
 * @param arr Масив цілих чисел для сортування.
 * @param size Кількість елементів у масиві.
 */
void BubbleSort(int arr[], int size)
{

  // Виведення інформаційного повідомлення в монітор порту,
  // щоб користувач знав, що розпочався процес сортування
  Serial.println("Виконується сортування масиву методом 'Бульбашки'...\r\n");

  /* Поставити "зірочку" -> /

  // Зовнішній цикл: визначає кількість проходів по масиву.
  // Після кожного проходу один елемент (найбільший із тих, що залишилися)
  // переміщається у свій «правильний» кінець масиву.
  for (int i... ;... ; i++) {

    // Внутрішній цикл: порівнює сусідні елементи.
    // З кожною ітерацією зовнішнього циклу межа порівнянь зменшується на 1,
    // тому перевіряємо лише до (size - i - 1).
    for (int j... ; ...; j++) {

      // Якщо поточний елемент більший за наступний —
      // виконується обмін (щоб менший елемент "піднявся" вище)
      if (...) {

        // Тимчасова змінна для збереження одного з елементів під час обміну
        int temp = ...;

        // Міняємо місцями елементи arr[j] і arr[j + 1]
        arr[j] = ...;
        arr[j + 1] = ...;
      }
    }
  }
/* */
  // Після завершення всіх проходів — масив відсортовано за зростанням.
  // Виводимо повідомлення для користувача в монітор порту.
  Serial.println("Масив відсортовано.\r\n");
}
